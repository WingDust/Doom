
*  lexical
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

* 通过 git 查看 doom 配置是否有改动

#+begin_src emacs-lisp
(defun doom-ischange ()
  (interactive)
    (let
        (
        ;; (default-directory "e:/spacemacs/emacs26-3/.doom.d/")
        ;; (explicit-shell-file-name "E:/PowerShell/7/pwsh.exe"))
        ;;(message (shell-command-to-string "git status -s"))
        ;; (shell-command-to-string "git status -s")
    )
  )
)

    

(setq start-org-doom-changelog (doom-ischange))

;; git -C e:/spacemacs/emacs26-3/.doom.d/ status -s 非在 git 目录下也可查看状态
#+end_src
- [[https://www.eigenbahn.com/2020/01/19/painless-emacs-shell-commands][Painless Emacs shell commands]]
  
* COMMENT 这个标题下代码块不会被编译到最后的 el 文件中
#+begin_src emacs-lisp
我不会被编译
#+end_src
* 启动速度
#+begin_src emacs-lisp

(defvar last-file-name-handler-alist file-name-handler-alist)
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6
      file-name-handler-alist nil)

;; ... your whole emacs config here ...

;; after startup, it is important you reset this to some reasonable default. A large 
;; gc-cons-threshold will cause freezing and stuttering during long-term 
;; interactive use. I find these are nice defaults:
(add-hook! 'emacs-startup-hook
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1
        file-name-handler-alist last-file-name-handler-alist))


#+end_src
- [[https://github.com/hlissner/doom-emacs/issues/4498][What is the correct way to profile Doom startup?]]

* compile my config
#+begin_src emacs-lisp
(defun compile-Org-to-elisp (file)
  (let ((tan (concat
             (file-name-sans-extension file) ".el")
            ))
    (org-babel-tangle-file file tan "emacs-lisp\\|elisp")
    (byte-compile-file tan)
    )
)

(defun compile-my-config()
  (interactive)
  
(cl-case system-type
  ('windows-nt
  (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+Config.org")
  (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+KeyBinding.org")
  (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+Org.org")
  (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+Mode.org")
  (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+Tweaks.org")
  (byte-recompile-directory "e:/spacemacs/emacs26-3/.doom.d/oc/")
   )
  ('gnu/linux
  (compile-Org-to-elisp "~/.doom.d/oc/+Config.org")
  (compile-Org-to-elisp "~/.doom.d/oc/+KeyBinding.org")
  (compile-Org-to-elisp "~/.doom.d/oc/+Org.org")
  (compile-Org-to-elisp "~/.doom.d/oc/+Mode.org")
  (compile-Org-to-elisp "~/.doom.d/oc/+Tweaks.org")
  (byte-recompile-directory "~/.doom.d/oc/")
   )
  )
)


(add-hook 'kill-emacs-hook (lambda ()
                             (compile-my-config)
                            ;; (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+Config.org")
                            ;; (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+KeyBinding.org")
                            ;; (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+Org.org")
                            ;; (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+Mode.org")
                            ;; (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/+Tweaks.org")
                            ;; (byte-recompile-directory "e:/spacemacs/emacs26-3/.doom.d/oc/")
                             ;; (let ((last-org-doom-changelog (doom-ischange)))
                             ;;     ;;(f-write-text  last-org-doom-changelog 'utf-8
                             ;;     ;;            "E:\\spacemacs\\emacs26-3\\.doom.d\\t.txt")
                             ;;     ;;(f-write-text  start-org-doom-changelog 'utf-8
                             ;;     ;;            "E:\\spacemacs\\emacs26-3\\.doom.d\\s.txt")
                             ;;    (if (not (string= last-org-doom-changelog start-org-doom-changelog))
                             ;;        (progn
                             ;;        (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/toOrg.org")
                             ;;        (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/keybinding.org")
                             ;;        (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/OrgConfig.org")
                             ;;        (compile-Org-to-elisp "e:/spacemacs/emacs26-3/.doom.d/oc/Mode.org")
                             ;;        (byte-recompile-directory "e:/spacemacs/emacs26-3/.doom.d/oc/")
                             ;;        )
                             ;;     )
                             ;;   )
                             ))
#+end_src

* Improve I/O

#+begin_src emacs-lisp
(when (boundp 'read-process-output-max)
  ;; 1MB in bytes, default 4096 bytes
  (setq read-process-output-max 1048576))
#+end_src

* 设置字体

#+begin_src emacs-lisp
(setq doom-font
      ;;(font-spec :family "Source Code Variable"
      ;;(font-spec :family "Sarasa Mono TC Light"
      (font-spec :family "Cascadia Mono"
                 :size 18
       )
      )
#+end_src
* 窗口最大化

#+begin_src emacs-lisp
(add-hook 'window-setup-hook #'toggle-frame-fullscreen)
#+end_src
- [[https://emacs-china.org/t/doom-emacs/10434][doom emacs 如何设置启动后窗口的大小?]]

* 窗口透明

#+begin_src emacs-lisp
 ;;transparent adjustment
 (set-frame-parameter (selected-frame)'alpha '(90 . 90))
 (add-to-list 'default-frame-alist'(alpha . (90 . 90)))
#+end_src
- =M-x doom/set-frame-opacity=
- [[https://www.reddit.com/r/emacs/comments/8oongp/making_the_background_transparent_but_not_the/][Making the background transparent but not the text in emacs?]]
- [[https://emacs-china.org/t/topic/2405][Emacs 透明窗口]]

* SPA 选择窗口

#+begin_src emacs-lisp
;;(map! :leader
;;  "0" 'winum-select-window-0-or-10
;;  "1" 'winum-select-window-1
;;  "2" 'winum-select-window-2
;;  "3" 'winum-select-window-3
;;  "4" 'winum-select-window-4
;;  "8" 'split-window-below
;;  "9" 'split-window-right
;;  )
#+end_src

* 使用系统废纸篓删除文件

#+begin_src emacs-lisp
;;(setq delete-by-moving-to-trash t)
#+end_src

* 闲置时 idle time 执行 recent-cleanup

#+begin_src emacs-lisp
;;(setq delete-by-moving-to-trash t)
#+end_src
- [[https://emacs.stackexchange.com/questions/22692/effect-of-multiple-idle-timers][Effect of multiple idle timers]]

* 修改启动页面的图片
#+begin_src emacs-lisp
;;(setq fancy-splash-image "~/.doom.d/banner/hack.png")
#+end_src

* 每个窗口添加边距
#+begin_src emacs-lisp
;; (add-hook 'after-change-major-mode-hook
;; (add-hook 'makrdown-mode-hook
;;           (lambda ()
;;                 (setq line-spacing 0.1)
;;                 ;; (setq header-line-format " ")
;;                 (setq left-margin-width 2)
;;                 (setq right-margin-width 2)
;;             )
;;           )
(setq-default line-spacing 0.2)                ;行间距
(setq-default left-margin-width 1 right-margin-width 1)

(defun my-linespacing ()
  (unless (minibufferp)
    (setq-local line-spacing 0.3)))
(add-hook 'buffer-list-update-hook #'my-linespacing)

(set-window-buffer nil (current-buffer))
#+end_src
- [[https://github.com/hlissner/doom-emacs/issues/567][ How to add padding/margins to Emacs buffers?]]
- [[https://pxaka.tokyo/blog/2019/emacs-buffer-list-update-hook/][line-spacing を制御する]]

* 通过将窗口分割线与背景色一样来隐藏窗口分割线
#+begin_src emacs-lisp
;; (set-face-foreground 'vertical-border "#282c34")
(set-face-foreground 'vertical-border "black")
#+end_src

*  修复从 clipboard 粘贴中文
#+begin_quote
Emacs只能指定新建buffer的默认编码，和读取文件时候的编码寻找顺序。文件写入编码 Emacs会根据文件内容来猜测，并保持原有的编码不变。如想改变写入编码，需手动改变。

Windows默认情况下，可以识别中文，也可以输入中文，但是新建文件的编码为 chinese-gbk-dos，为了改为utf-8，并且换行符为unix格式，在配置文件中加入下面这行。
=(setq default-buffer-file-coding-system 'utf-8-unix)=

附上手动修改编码的方法：
M-x set-buffer-file-coding-system coding 保存后，文件即是coding编码
C-x f coding 保存后，文件为coding编码
C-x r coding 以coding编码重新读取文件
C-x c coding 以coding编码执行接下去输入的命令，如 C-x c utf-8 C-x C-f a.txt 用utf-8编码打开a.txt文件
#+end_quote

#+begin_src emacs-lisp
;; 修复从 clipboard 粘贴中文为 \324 
(if (eq system-type 'windows-nt)
    (progn
      (set-clipboard-coding-system 'utf-16-le)
      (set-selection-coding-system 'utf-16-le))
  (set-selection-coding-system 'utf-8))
(prefer-coding-system 'utf-8-unix)
;;将utf-8放到编码顺序表的最开始，即先从utf-8开始识别编码，此命令可以多次使用，后指定的编码先探测

(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8-unix)
(set-terminal-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8-unix)
(setq locale-coding-system 'utf-8-unix)
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))) 

;; (set-buffer-file-coding-system 'utf-8-unix)
;;指定当前buffer的写入编码，只对当前buffer有效，即此命令写在配置文件中无效，只能通过M-x来执行
;; (setq default-buffer-file-coding-system 'utf-8-unix)
;;指定新建buffer的默认编码为utf-8-unix，换行符为unix的方式

                        
#+end_src
- [[https://emacs.stackexchange.com/questions/22727/pasting-text-from-clipboard-why-m-instead-of-linebreaks][Pasting Text from Clipboard - why ^M instead of linebreaks?]]
* straight
#+begin_src emacs-lisp

#+end_src
* 

